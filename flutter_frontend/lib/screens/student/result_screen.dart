import 'package:flutter/material.dart';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:printing/printing.dart';
import '../../widgets/sidebar.dart';

class ResultScreen extends StatefulWidget {
  const ResultScreen({super.key});

  @override
  State<ResultScreen> createState() => _ResultScreenState();
}

class _ResultScreenState extends State<ResultScreen>
    with SingleTickerProviderStateMixin {
  static const double sidebarWidth = 240;
  late final AnimationController _controller;
  late final Animation<double> _sidebarTranslate;
  late final Animation<double> _contentTranslate;
  late final Animation<double> _overlayOpacity;
  bool _isOpen = false;
  bool _navigating = false;

  final GlobalKey _dropdownKey = GlobalKey();
  String selectedSemester = "Semester 1";

  final Map<String, List<Map<String, dynamic>>> mockResults = {
    "Semester 1": [
      {"subject": "Mathematics I", "code": "MA101", "marks": 88, "grade": "A"},
      {"subject": "Physics", "code": "PH101", "marks": 76, "grade": "B+"},
      {"subject": "Programming", "code": "CS101", "marks": 91, "grade": "A+"},
      {"subject": "English", "code": "EN101", "marks": 83, "grade": "A"},
    ],
    "Semester 2": [
      {"subject": "Mathematics II", "code": "MA102", "marks": 81, "grade": "A"},
      {"subject": "Electronics", "code": "EC101", "marks": 74, "grade": "B"},
      {"subject": "Data Structures", "code": "CS102", "marks": 89, "grade": "A+"},
      {"subject": "Machine Learning", "code": "AI101", "marks": 93, "grade": "A+"},
    ],
  };

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 350),
    );

    const curve = Curves.easeInOutQuart;
    _sidebarTranslate = Tween<double>(begin: -sidebarWidth, end: 0).animate(
      CurvedAnimation(parent: _controller, curve: curve),
    );
    _contentTranslate = Tween<double>(begin: 0, end: sidebarWidth * 0.7).animate(
      CurvedAnimation(parent: _controller, curve: curve),
    );
    _overlayOpacity = Tween<double>(begin: 0, end: 0.35).animate(
      CurvedAnimation(parent: _controller, curve: curve),
    );
  }

  void _toggleSidebar() {
    if (_navigating) return;
    setState(() {
      _isOpen = !_isOpen;
      _isOpen ? _controller.forward() : _controller.reverse();
    });
  }

  Future<void> _handleSidebarNavigation(String route) async {
    if (_navigating) return;
    _navigating = true;

    if (ModalRoute.of(context)?.settings.name == route) {
      await _controller.reverse();
      if (mounted) setState(() => _isOpen = false);
      _navigating = false;
      return;
    }

    if (mounted) Navigator.pushReplacementNamed(context, route);

    WidgetsBinding.instance.addPostFrameCallback((_) async {
      await Future.delayed(const Duration(milliseconds: 300));
      if (mounted) {
        await _controller.reverse();
        setState(() => _isOpen = false);
      }
      _navigating = false;
    });
  }

  Future<void> _printSemesterResults() async {
    final pdf = pw.Document();
    final semesterResults = mockResults[selectedSemester]!;

    pdf.addPage(
      pw.Page(
        margin: const pw.EdgeInsets.all(24),
        build: (context) {
          return pw.Column(
            crossAxisAlignment: pw.CrossAxisAlignment.start,
            children: [
              pw.Text("Result Report - $selectedSemester",
                  style: pw.TextStyle(
                      fontSize: 22,
                      fontWeight: pw.FontWeight.bold,
                      color: PdfColors.red900)),
              pw.SizedBox(height: 20),
              pw.Table.fromTextArray(
                headers: ["Subject", "Code", "Marks", "Grade"],
                data: semesterResults
                    .map((e) => [
                          e["subject"].toString(),
                          e["code"].toString(),
                          e["marks"].toString(),
                          e["grade"].toString(),
                        ])
                    .toList(),
                headerStyle: pw.TextStyle(
                  color: PdfColors.white,
                  fontWeight: pw.FontWeight.bold,
                ),
                headerDecoration:
                    const pw.BoxDecoration(color: PdfColors.red900),
                cellPadding: const pw.EdgeInsets.all(8),
                cellAlignment: pw.Alignment.centerLeft,
              ),
              pw.SizedBox(height: 20),
              pw.Text("Generated by Result Analysis App",
                  style: pw.TextStyle(
                      fontSize: 12, color: PdfColors.grey600)),
            ],
          );
        },
      ),
    );

    await Printing.layoutPdf(onLayout: (format) async => pdf.save());
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  Future<void> _showSemesterMenu() async {
    final ctx = _dropdownKey.currentContext;
    if (ctx == null) return;

    final RenderBox box = ctx.findRenderObject() as RenderBox;
    final Offset offset = box.localToGlobal(Offset.zero);
    final double fieldWidth = box.size.width;
    final double fieldHeight = box.size.height;
    final double screenHeight = MediaQuery.of(context).size.height;

    final chosen = await showMenu<String>(
      context: context,
      position: RelativeRect.fromLTRB(
        offset.dx,
        offset.dy + fieldHeight + 2,
        offset.dx + fieldWidth,
        screenHeight,
      ),
      constraints: BoxConstraints.tightFor(width: fieldWidth),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(8),
      ),
      color: Colors.white,
      elevation: 8,
      items: mockResults.keys.map((sem) {
        return PopupMenuItem<String>(
          value: sem,
          padding:
              const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
          child: Text(
            sem,
            style:
                const TextStyle(fontSize: 16, color: Colors.black87),
            overflow: TextOverflow.ellipsis,
          ),
        );
      }).toList(),
    );

    if (chosen != null) setState(() => selectedSemester = chosen);
  }

  Widget _buildHeader() {
    return Padding(
      padding: const EdgeInsets.fromLTRB(16, 12, 16, 6), // tightened spacing
      child: Container(
        width: double.infinity,
        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 14),
        decoration: BoxDecoration(
          gradient: const LinearGradient(
            colors: [Color(0xFFFFFFFF), Color(0xFFFFF2F2)],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
          borderRadius: BorderRadius.circular(12),
          boxShadow: const [
            BoxShadow(color: Colors.black12, blurRadius: 8, offset: Offset(0, 3))
          ],
        ),
        child: Row(
          children: [
            IconButton(
              icon: const Icon(Icons.menu_rounded,
                  color: Color(0xFFB11116), size: 30),
              onPressed: _toggleSidebar,
            ),
            const SizedBox(width: 8),
            const Expanded(
              child: Text(
                "My Results",
                textAlign: TextAlign.center,
                style: TextStyle(
                  fontSize: 22,
                  fontWeight: FontWeight.bold,
                  color: Color(0xFFB11116),
                ),
              ),
            ),
            InkWell(
              customBorder: const CircleBorder(),
              onTap: () {
                Navigator.pushNamedAndRemoveUntil(
                    context, '/studentDashboard', (route) => false);
              },
              child: AnimatedContainer(
                duration: const Duration(milliseconds: 200),
                width: 46,
                height: 46,
                decoration: const BoxDecoration(
                  color: Color(0xFFB11116),
                  shape: BoxShape.circle,
                  boxShadow: [
                    BoxShadow(
                        color: Color(0x33B11116),
                        blurRadius: 8,
                        offset: Offset(0, 3))
                  ],
                ),
                child:
                    const Icon(Icons.dashboard, color: Colors.white, size: 22),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildContent() {
    final currentResults = mockResults[selectedSemester]!;

    return LayoutBuilder(
      builder: (context, constraints) {
        final bool isMobile = constraints.maxWidth < 600;
        final double contentWidth =
            isMobile ? constraints.maxWidth - 24 : 700;

        return Center(
          child: SingleChildScrollView(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            child: ConstrainedBox(
              constraints: BoxConstraints(maxWidth: contentWidth),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  const Text(
                    "Semester Results",
                    style: TextStyle(
                        fontSize: 22,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFFB11116)),
                  ),
                  const SizedBox(height: 8), // tighter spacing
                  GestureDetector(
                    key: _dropdownKey,
                    onTap: _showSemesterMenu,
                    child: InputDecorator(
                      decoration: const InputDecoration(
                        labelText: "Select Semester",
                        prefixIcon:
                            Icon(Icons.school, color: Color(0xFFB11116)),
                        border: OutlineInputBorder(),
                        contentPadding:
                            EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                      ),
                      child: Row(
                        mainAxisAlignment:
                            MainAxisAlignment.spaceBetween,
                        children: [
                          Text(selectedSemester,
                              style: const TextStyle(fontSize: 16)),
                          const Icon(Icons.arrow_drop_down),
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(height: 16), // reduced gap before table
                  Container(
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(12),
                      boxShadow: const [
                        BoxShadow(
                            color: Colors.black12,
                            blurRadius: 8,
                            offset: Offset(0, 2))
                      ],
                    ),
                    child: ClipRRect(
                      borderRadius: BorderRadius.circular(12),
                      child: Table(
                        columnWidths: const {
                          0: FlexColumnWidth(2.5),
                          1: FlexColumnWidth(1.5),
                          2: FlexColumnWidth(1),
                          3: FlexColumnWidth(1),
                        },
                        border: TableBorder.symmetric(
                          inside:
                              BorderSide(color: Colors.grey[300]!, width: 1),
                        ),
                        children: [
                          const TableRow(
                            decoration:
                                BoxDecoration(color: Color(0xFFB11116)),
                            children: [
                              Padding(
                                padding: EdgeInsets.all(14),
                                child: Text("Subject",
                                    style: TextStyle(
                                        color: Colors.white,
                                        fontWeight: FontWeight.bold)),
                              ),
                              Padding(
                                padding: EdgeInsets.all(14),
                                child: Text("Code",
                                    style: TextStyle(
                                        color: Colors.white,
                                        fontWeight: FontWeight.bold)),
                              ),
                              Padding(
                                padding: EdgeInsets.all(14),
                                child: Center(
                                  child: Text("Marks",
                                      style: TextStyle(
                                          color: Colors.white,
                                          fontWeight: FontWeight.bold)),
                                ),
                              ),
                              Padding(
                                padding: EdgeInsets.all(14),
                                child: Center(
                                  child: Text("Grade",
                                      style: TextStyle(
                                          color: Colors.white,
                                          fontWeight: FontWeight.bold)),
                                ),
                              ),
                            ],
                          ),
                          for (var i = 0;
                              i < currentResults.length;
                              i++)
                            TableRow(
                              decoration: BoxDecoration(
                                color: i.isEven
                                    ? Colors.white
                                    : const Color(0xFFF8FAFF),
                              ),
                              children: [
                                Padding(
                                  padding: const EdgeInsets.all(14),
                                  child: Text(
                                      currentResults[i]["subject"]),
                                ),
                                Padding(
                                  padding: const EdgeInsets.all(14),
                                  child: Text(currentResults[i]["code"]),
                                ),
                                Padding(
                                  padding: const EdgeInsets.all(14),
                                  child: Center(
                                      child: Text(currentResults[i]["marks"]
                                          .toString())),
                                ),
                                Padding(
                                  padding: const EdgeInsets.all(14),
                                  child: Center(
                                      child:
                                          Text(currentResults[i]["grade"])),
                                ),
                              ],
                            ),
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(height: 20),
                  ElevatedButton.icon(
                    onPressed: _printSemesterResults,
                    icon:
                        const Icon(Icons.picture_as_pdf, color: Colors.white),
                    label: const Text("Print Semester Results",
                        style:
                            TextStyle(color: Colors.white, fontSize: 16)),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFFB11116),
                      padding: const EdgeInsets.symmetric(
                          horizontal: 22, vertical: 14),
                      elevation: 4,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        Navigator.pushNamedAndRemoveUntil(
            context, '/studentDashboard', (route) => false);
        return false;
      },
      child: Scaffold(
        backgroundColor: const Color(0xFFE9F2FF),
        body: Stack(
          children: [
            AnimatedBuilder(
              animation: _controller,
              builder: (context, _) {
                return Transform.translate(
                  offset: Offset(_contentTranslate.value, 0),
                  child: Column(
                    children: [
                      _buildHeader(),
                      Expanded(child: _buildContent()),
                    ],
                  ),
                );
              },
            ),
            AnimatedBuilder(
              animation: _controller,
              builder: (context, _) {
                return _overlayOpacity.value > 0
                    ? Opacity(
                        opacity: _overlayOpacity.value,
                        child: GestureDetector(
                          onTap: _toggleSidebar,
                          child: Container(
                              color: Colors.black.withOpacity(0.3)),
                        ),
                      )
                    : const SizedBox.shrink();
              },
            ),
            AnimatedBuilder(
              animation: _controller,
              builder: (context, child) {
                return Transform.translate(
                    offset: Offset(_sidebarTranslate.value, 0), child: child);
              },
              child: SizedBox(
                width: sidebarWidth,
                height: MediaQuery.of(context).size.height,
                child: Sidebar(
                    role: "student", onNavigate: _handleSidebarNavigation),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
